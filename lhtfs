#!/usr/bin/env python

import os, stat, errno
try:
    import _find_fuse_parts
except ImportError:
    pass
import fuse
from fuse import Fuse
import syslog
import re
import urllib2
import time
import sys

serverlocation = '_netboot._autoprovision'

if not hasattr(fuse, '__version__'):
    raise RuntimeError, \
        "your fuse-py doesn't know of fuse.__version__, probably it's too old."

fuse.fuse_python_api = (0, 2)

def getserverlocation():
	res                     = dns.resolver.Resolver()
	domain                  = res.domain.__str__()
	if domain == '.':
	        domain          = re.sub(r'^\.(.*)',r'\1',socket.getfqdn().replace(socket.gethostname(),''))
	targetservername        = dns.resolver.query('%s.%s'%(serverlocation,domain),'SRV')[0].target.__str__()[:-1]
	targetserverport        = dns.resolver.query('%s.%s'%(serverlocation,domain),'SRV')[0].port
	targetserver       	= "http://%s:%i/"%(targetservername,targetserverport)
	return targetserver


class MyStat(fuse.Stat):
    def __init__(self):
        self.st_mode = 0
        self.st_ino = 1
        self.st_dev = 0
        self.st_nlink = 0
        self.st_uid = 65534
        self.st_gid = 65534
        self.st_size = 4096
        self.st_atime = int(time.time())
        self.st_mtime = self.st_atime
        self.st_ctime = self.st_atime
	self.st_blksize = 4096


class lhtfs(Fuse):
	def __init__(self,*args,**kw):
		self.server     = kw['serverlocation']
		del kw['serverlocation']
		Fuse.__init__(self,*args,**kw)
		self.subdirs	= {}
		self.subdirs['/'] = []
		self.files	= {}
		self.data	= {}
		self.__log("INIT","Forwarindg lousy hyper-text filesystem to %s"%self.server)

	def __log(self,function,msg):
		syslog.openlog("lhtfs")
		syslog.syslog("%s: %s"%(function,msg))

	def __extenddir(self,parent,child):
		child = os.path.basename(child)
		if not self.subdirs.has_key(parent):
			self.subdirs[parent] = []	
		if child not in self.subdirs[parent]:
			if not child == '':
				self.subdirs[parent].append(child)
	def __extendfile(self,parent,child):
		child = os.path.basename(child)
		if not self.files.has_key(parent):
			self.files[parent] = []
		if child not in self.files[parent]:
			if not child == '':
				self.files[parent].append(child)
	def __data(self,path,file_str):
		self.data[path] = file_str
	def __openurl(self,path):
		try:
			file_str = urllib2.urlopen("%s%s"%(self.server,path)).read()
			self.__extendfile(os.path.dirname(path),path)
			self.__data(path,file_str)
			return True
		except urllib2.HTTPError, e:
			if e.code== 500:
				self.__extenddir(os.path.dirname(path),path)
				return (None,0)
			if e.code== 404:
				print("%s does not exist"%path)
				return -errno.ENOENT

	def getattr(self,path):
		st = MyStat()
		d = self.GetContext()
		st.st_uid   = d['uid']
		st.st_gid   = d['gid']
		if path == '/':
			st.st_mode = stat.S_IFDIR | 0777
			st.st_nlink = 2 + len(self.subdirs['/'])
			return st
		if self.__openurl(path):
			if self.data.has_key(path):
				st.st_mode = stat.S_IFREG | 0444
				st.st_nlink = 1
				st.st_size  = len(self.data[path])
				return st
			if os.path.basename(path) in self.subdirs[os.path.dirname(path)]:
				st.st_mode = stat.S_IFDIR | 0755
				st.st_nlink = 2 + len(self.subdirs[os.path.dirname(path)])
				return st
		else:
			return -errno.ENOENT

	def read(self,path,size,offset):
		if self.__openurl(path):
			slen = len(self.data[path])
			if offset < slen:
				if offset + size > slen:
					size = slen - offset
					buf = self.data[path][offset:offset+size]
				else:
					buf = self.data[path][offset:offset+size]
					
			else:
				buf = ''
			return buf
	def readdir(self,path,offset):
		dirlist = [ '.','..' ]
		if self.subdirs.has_key(path):
			dirlist += self.subdirs[path]
		if self.files.has_key(path):
			dirlist += self.files[path]
		for r in dirlist:
			yield fuse.Direntry(r)
	def open(self,path,flags):
		accmode = os.O_RDONLY

def main():
    if len(sys.argv) < 5:
	print("Please give a URL to mount")
	sys.exit(1)
    server = lhtfs(serverlocation=sys.argv[1],version="%prog " + fuse.__version__,dash_s_do='setsingle')
    server.parse(errex=1)
    server.main()

if __name__ == '__main__':
    main()
